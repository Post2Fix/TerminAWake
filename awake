#!/bin/bash

# Check if script is run as root
if [[ $EUID -ne 0 ]]; then
  echo "This script must be run with root privileges (sudo)."
  exit 1
fi

duration=$1  # Get the duration argument that was passed to the script

# Function to reenable sleep and quit
function quit {
  pmset -b disablesleep 0
  pmset -c disablesleep 0
  exit
}

# Prevent sleep indefinitely for battery and AC power modes when no argument was passed
pmset -b disablesleep 1
pmset -c disablesleep 1

if [[ -z $duration ]]; then
  echo "Sleep disabled indefinitely. Press Enter to re-enable sleep."

  # Wait for user to press Enter to reenable sleep
  read -r
else
  # Separate the time & timescale suffixes
  suffix="${duration: -1}"
  value="${duration%?}"

  # Identify user input's timescale and convert it to seconds
  case "$suffix" in
    s) duration_sec="$value" ;;
    h) duration_sec=$((value * 3600)) ;;
    *) duration_sec="$((duration * 60))" ;;  # Assume minutes suffix other than 'h' & 's' (including no value)
  esac

  echo "Sleep disabled for ${duration_sec} seconds. Press Enter to re-enable sleep."

  # Sleep for the specified duration in a subshell
  (
    sleep "$duration_sec"
    quit
  ) &
  # Save the PID of the subshell
  sleep_pid=$!
  # Remove this job from the shell's active list
  disown $sleep_pid
  
  # Wait for user to press Enter
  read -r
  
  # If user pressed Enter, kill the sleep subshell
  kill "$sleep_pid" 2>/dev/null
fi

# Call quit function
quit
